type Persona is record{
    /* 
        PROPÓSITO: Modelar los datos de una persona
    */
    
    field dni // String
    field domicilio // String
    field esDonante // Booleano
}

function sonConvivientes_Y_(persona1, persona2){
    /*
        PROPÓSITO:  Indica si la persona **persona1** y la persona **persona2** 
                    comparten el mismo domicilio.
        PARÁMETROS:
                    **persona1** - Persona - La primera persona a comparar su domicilio
                    **persona2** - Persona - La segunda persona a comparar su domicilio
        TIPO: Booleano
        PRECONDICIONES: Ninguna
    */
    
    return (domicilio(persona1)==domicilio(persona2))
}

function personaNacidaDe_(unaMadre){
    /*
        PROPÓSITO:  Describe una nueva persona nacida de la madre **unaMadre**
                    con mismo domicilio, sin DNI asignado y no siendo donante.
        PARÁMETROS:
                **unaMadre** - Persona - la madre de la nueva persona a describir.
        TIPO: Persona
        PRECONDICIONES: Ninguna
    */
    
    return (Persona(
                    dni<-sinAsignar(),
                    domicilio<-domicilio(unaMadre),
                    esDonante<-False
                    )
            )
}

function sinAsignar(){
    /*
        PROPÓSITO: Decribe un datos String vacío.
        TIPO: String
        PRECONDICIONES: Ninguna
    */
    
    return ("")
    
}

function persona_RegistradaCon_(unaPersona, dniARegistrar){
    /*
        PROPÓSITO: Desribe a la persona **unaPersona** sin DNI asignado, con el dni **dniARegistrar**
        PARÁMETROS:
                **unaPersona** - Persona - La persona a la cual se le registrará el dni ¨
                **dniARegistrar** - String - El dni a asignar a la persona
        TIPO: Persona
        PRECONDICIONES: 
            *unaPersona debe tener el dni sin registrar (esta es discutible)
    */
    
    return (Persona(unaPersona|dni<-dniARegistrar)) //comento esta línea abajo
    //el pipe (|) sirve para crear un registro nuevo modificando algún campo, se escribe: Registro("instancia de registro"|campo <- valor)
    //es decir, se crea una persona nueva con los mismos campos que **unaPersona** salvo el dni
}

function persona_ConDomicilioNuevoEn_(unaPersona, domicilioARegistrar){
    /*
        PROPÓSITO: Desribe a la persona **unaPersona** con la dirección **domicilioARegistrar**
        PARÁMETROS:
                **unaPersona** - Persona - La persona a la cual se le registrará el dni ¨
                **domicilioARegistrar** - String - El domicilio a asignar a la persona
        TIPO: Persona
        PRECONDICIONES: Ninguna
    */
    
    return (Persona(unaPersona|domicilio<-domicilioARegistrar, dni))
}

function persona_ConSituaciónComoDonanteCambiada(unaPersona){
     /*
        PROPÓSITO: Desribe a la persona **unaPersona** con la situación de donante cambiada
        PARÁMETROS:
                **unaPersona** - Persona - La persona a la cual se le cambia la situación de donante¨
        TIPO: Persona
        PRECONDICIONES: Ninguna
    */
    
    return (Persona(unaPersona|esDonante<- not esDonante(unaPersona)))
}

//esta no la pide, pero armo un constructor por si querés probar las funciones
function personaNuevaConDNI_ViviendoEn_Donante_(unDni, unDomicilio, unIndicadorDonante){
    /*
        PROPÓSITO:  Describe una nueva persona con dni **unDni**, con domicilio en **unDomicilio**
                    y el indicador si es Donante como **unIndicadorDonante**
        PARÁMETROS:
                    **unDni** - String - El dni a asignar a esta nueva persona
                    **unDomicilio** - String - El domicilio a asignar a la nueva persona
                    **unIndicadorDonante - Booleano - El indicador a asignar  a la nueva persona si es donante
        TIPO: Persona        
        PRECONDICIONES: Ninguna
    */
    
    return (Persona (
                    dni<-unDni, 
                    domicilio <-unDomicilio, 
                    esDonante <-unIndicadorDonante
                    )
            )
}

program{
    alan := personaNuevaConDNI_ViviendoEn_Donante_("444444444", "calle123",False)
 
   return(persona_ConDomicilioNuevoEn_(alan, "nueva calle"))
    
}








