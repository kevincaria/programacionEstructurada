//3
type Palo is variant{
    /* 
        PROPÓSITO: Modelar los palos de una carta
    */
    case Espada{}
    case Basto {}
    case Oro {}
    case Copa{}
}

type Carta is record{
    /* 
        PROPÓSITO: Modelar los datos de una carta
        INV. REP.:
            * El numero debe ser entre 1 y 12
    */    
    field palo //Palo
    field numero //Numero
}

function anchoDeEspadas() {
    /*
        PROPÓSITO:  Describe la carta 1 de Espadas.
        TIPO: Carta
        PRECONDICIONES: Ninguna
    */
    
    return (Carta(  palo<-Espada
                    numero <- 1))
}

function anchoDeBastos() {
    /*
        PROPÓSITO:  Describe la carta 1 de Bastos.
        TIPO: Carta
        PRECONDICIONES: Ninguna
    */
    
    return (Carta(  palo<-Bastos
                    numero <- 1))
}

function laCarta_De(numero,palo) {
    /*
        PROPÓSITO:  Describe la carta **numero** de **palo**
        TIPO: Carta
        PRECONDICIONES: Ninguna
    */
    
    return (Carta(  palo<-palo
                    numero <- numero))
}

function esUnAncho_(carta) {
    /*
        PROPÓSITO:  Indica si la carta **carta** es un 1.
        TIPO: Booleano
        PARAMETROS:
            * carta - Carta - La carta a evaluar 
        PRECONDICIONES: Ninguna
    */
    
    return (numero(carta)==1)
}

function esFigura_(carta) {
    /*
        PROPÓSITO:  Indica si la carta **carta** es una figura.
        TIPO: Booleano
        PARAMETROS:
            * carta - Carta - La carta a evaluar 
        PRECONDICIONES: Ninguna
    */
    
    return (numero(carta)>=10 && numero(carta)<=12)
}

function esDeOro_(carta) {
    /*
        PROPÓSITO:  Indica si la carta **carta** es de oro.
        TIPO: Booleano
        PARAMETROS:
            * carta - Carta - La carta a evaluar 
        PRECONDICIONES: Ninguna
    */
    
    return (palo(carta)==Oro)
}

function tieneUnNúmeroMásGrande_Que_(primerCarta, segundaCarta) {
    /*
        PROPÓSITO:  Indica si la carta **primerCarta** tiene un numero mas grande
        que la carta **segundaCarta**
        TIPO: Booleano
        PARAMETROS:
            * primerCarta - Carta - Primer carta a evaluar 
            * segundaCarta - Carta - Segunda carta a evaluar 
        PRECONDICIONES: Ninguna
    */
    
    return (numero(primerCarta)>numero(segundaCarta))
}

function sonDelMismoPalo_Y_(primerCarta, segundaCarta) {
    /*
        PROPÓSITO:  Indica si la carta **primerCarta** es del mismo palo
        que la carta **segundaCarta**
        TIPO: Booleano
        PARAMETROS:
            * primerCarta - Carta - Primer carta a evaluar 
            * segundaCarta - Carta - Segunda carta a evaluar 
        PRECONDICIONES: Ninguna
    */
    
    return (palo(primerCarta) == palo(segundaCarta))
}

function valorParaEnvidoDe__(carta) {
    /*
        PROPÓSITO:  Describe el numero que aporta la carta **carta**
        en el cato del envido
        TIPO: Booleano
        PARAMETROS:
            * carta - Carta - Primer carta a evaluar 
        PRECONDICIONES: Ninguna
    */
    
    return ( choose numero(carta) when not esFigura_(carta)
                    0 otherwise)
}

function mayorValorEntre_Y_(primerCarta, segundaCarta) {
    /*
        PROPÓSITO:  describe el valor mas grande entre la carta **primerCarta**  y la carta **segundaCarta**
        TIPO: Numero
        PARAMETROS:
            * primerCarta - Carta - Primer carta a evaluar 
            * segundaCarta - Carta - Segunda carta a evaluar 
        PRECONDICIONES: Ninguna
    */
    
    return (choose  numero(primerCarta) when numero(primerCarta)>numero(segundaCarta) && not esFigura_(primerCarta)
                    numero(segundaCarta) when numero(segundaCarta)>numero(primerCarta) && not esFigura_(segundaCarta)
                    )
}