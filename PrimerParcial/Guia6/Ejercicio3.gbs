procedure SacarUnaFicha_SiSePuede(colorDeLaFicha){
    /*
        PROPÓSITO: Saca una ficha del color **colorDeLaFicha** si hubiera una,
        en la celda actual.
        PRECONDICIONES: Sin precondiciones.
        OBSERVACIONES: Una ficha se representa con una bolita del color **colorDeLaFicha**.
        PARÁMETROS: 
            * colorDeLaFicha - Color - Color de la ficha a sacar de la celda actual.

    */
    if(hayBolitas(colorDeLaFicha)){
        SacarFichaDeColor_(colorDeLaFicha)
    }
}

procedure SacarFichaDeColor_(colorDeLaFicha){
    /*
        PROPÓSITO: Saca una ficha del color **colorDeLaFicha** de la celda actual.
        PRECONDICIONES: Debe haber al menos una ficha del color **colorDeLaFicha**
        en la celda actual  
        OBSERVACIONES: Una ficha se representa con una bolita del color **colorDeLaFicha**.
        PARÁMETROS: 
            * colorDeLaFicha - Color - Color de la ficha a sacar de la celda actual.

    */
    Sacar(colorDeLaFicha)
}

procedure DesempatarParaElLocal_Contra_(colorDelLocal,colorDelVisitante){
    /*
        PROPÓSITO: Otorga un punto al equipo local **colorDelLocal** en la celda actual 
        en caso de empate con el equipo visitante **colorDelVisitante**.
        PRECONDICIONES: Sin precondiciones.
        OBSERVACIONES: Un punto se representa con una bolita del color correspondiente al equipo.
        PARÁMETROS: 
            * colorDelLocal - Color - Color del equipo local.
            * colorDelVisitante - Color - Color del equipo visitante.

    */
    if(nroBolitas(colorDelLocal)==nroBolitas(colorDelVisitante)){
        OtorgarPuntoPara_(colorDelLocal)
    }
}

procedure OtorgarPuntoPara_(colorDeEquipo){
    /*
        PROPÓSITO: Otorga un punto al equipo del color **colorDeEquipo** en la celda actual.
        PRECONDICIONES: Sin precondiciones.
        OBSERVACIONES: Un punto se representa con una bolita del color **colorDeEquipo** del equipo.
        PARÁMETROS: 
            * colorDeEquipo - Color - Color del equipo.
    */
    Poner(colorDeEquipo)
}

procedure ExpandirBacteriaDeLaColonia(){
    /*
        PROPÓSITO: Expande la cantidad de bacterias mientras haya suficientes nutrientes 
        en la celda actual (A razòn de 1 bacteria/2 nutrientes).
        PRECONDICIONES: Sin precondiciones.
        OBSERVACIONES: 
            * Las bacterias se representan con bolitas Verdes.
            * Los nutrientes se representan con bolitas Rojas.

    */
    if(nroBolitas(Verde)>=1&&nroBolitas(Rojo)>=2){
        AgregarBacteria()
        ConsumirNutrientes()
    }
}

procedure AgregarBacteria(){
    /*
        PROPÓSITO: Agrega una bacteria a la celda actual.
        PRECONDICIONES: Sin precondiciones.
        OBSERVACIONES: 
            * Las bacterias se representan con bolitas Verdes.

    */
    Poner(Verde)
}

procedure ConsumirNutrientes(){
    /*
        PROPÓSITO: Consume 2 nutrientes de la celda actual.
        PRECONDICIONES: Debe haber al menos 2 nutrientes en la celda actual
        OBSERVACIONES: 
            * Los nutrientes se representan con bolitas Rojas.
    */
    repeat (2) {
        Sacar(Rojo)
    }
}

procedure PonerFlecha_AlNorteSiCorresponde(colorDeLaFlecha){
    /*
        PROPÓSITO: Pone una flecha del color **colorDeLaFlecha** en la celda actual 
        si hay una celda lindante hacia el Norte.
        PRECONDICIONES: Sin precondiciones.
        OBSERVACIONES: 
            * Una flecha es representada con una bolita del color **colorDeLaFlecha** .
        PARÁMETROS: 
            * colorDeLaFlecha - Color - Color de la flecha.
    */
    if(puedeMover(Norte)){
        PonerFlechaColor_(colorDeLaFlecha)
    }
}

procedure PonerFlechaColor_(colorDeLaFlecha){
    /*
        PROPÓSITO: Pone una flecha de color **colorDeLaFlecha** en la celda actual.
        PRECONDICIONES: Sin precondiciones.
        OBSERVACIONES: 
            * Una flecha es representada con una bolita del color **colorDeLaFlecha** .
        PARÁMETROS: 
            * colorDeLaFlecha - Color - Color de la flecha.
    */
    Poner(colorDeLaFlecha)
}