program{
    EnviarAliadosParaDuplicarEnemigos()
    PelearLaBatalla()
}

procedure EnviarAliadosParaDuplicarEnemigos(){
    /*
        PROPÓSITO: Envia el doble de soldados aliados a la celda actual en base a la cantidad de soldados enemigos
        PRECONDICIONES: 
            * Debe haber al menos un soldado enemigo en la celda actual
        OBSERVACIONES: Una bolita roja representa un soldado enemigo
    */
    repeat(nroBolitas(Rojo)*2){
        PonerAliado()
    }
}

procedure PonerAliado(){
    /*
        PROPÓSITO: Pone solado aliado en la celda actual
        PRECONDICIONES: Sin precondiciones
        OBSERVACIONES: Una bolita negra representa un soldado aliado
    */
    Poner(Negro)
}

procedure PelearBatalla(){
    /*
        PROPÓSITO: Simula una batalla entre soldados aliados y soldados enemigos
        PRECONDICIONES: 
             * Debe haber al menos un soldado enemigo y un soldado aliado en la celda actual
        OBSERVACIONES: Durante una batalla, 2 enemigos pelean contra 3 aliados y todos mueren
    */
    CalcularAliadosMuertosEnBatalla()

}

procedure CalcularAliadosMuertosEnBatalla(){
    /*
        PROPÓSITO: Calcula la cantidad de soldados aliados que cayeron en batalla 
        PRECONDICIONES:
             * Debe haber al menos un soldado aliado en la celda actual
        OBSERVACIONES: Una bolita roja representa un soldado enemigo
    */
    repeat(nroBolitas(Rojo)*(3/2)){
        SacarAliado()
    }
}

procedure CalcularEnemigosMuertosEnBatalla(){
    /*
        PROPÓSITO:  Calcula la cantidad de soldados enemigos que cayeron en batalla 
        PRECONDICIONES:
             * Debe haber al menos un soldado enemigo en la celda actual
        OBSERVACIONES: Una bolita negra representa un soldado aliado
    */
    repeat(nroBolitas(Negro)*2/3){
        SacarEnemigo()
    }
}

procedure SacarEnemigo(){
    /*
        PROPÓSITO: Saca soldado enemigo de la celda actual.
        PRECONDICIONES:
             * Debe haber al menos un soldado enemigo en la celda actual.
        OBSERVACIONES: Una bolita roja representa un soldado enemigo.
    */
    Sacar(Rojo)
}

procedure SacarAliado(){
    /*
        PROPÓSITO: Saca soldado aliado de la celda actual.
        PRECONDICIONES:
             * Debe haber al menos un soldado aliado en la celda actual.
        OBSERVACIONES: Una bolita negra representa un soldado aliado.
    */
    Sacar(Negro)
}