//28
procedure LimpiarCruzDeColor_(color){
    /*
        PROPÓSITO:Limpia la cruz de color **color** con centro en la celda actual.
        PRECONDICIONES:
        *Debe haber al menos una celda lindante en cada una de las direcciones.
        *Debe haber al menos una bolita de color **color** en las celdas lindantes en cada una 
        de las direcciones.
        PARAMETROS:
            *color - Color - El color a limpiar de la cruz.
        OBSERVACIONES: Recorrido sobre direcciones, poniendo una bolita de cada color en cada una 
        de las direcciones.
    */

    direcciónAMover := minDir()
    while(direcciónAMover/= maxDir()){
        Sacar_Al_YVolver(color,direcciónAMover)
        direcciónAMover := siguiente(direcciónAMover)
    }
    Sacar_Al_YVolver(color,direcciónAMover)

}

procedure Sacar_Al_YVolver(color,dirección){
    /*
        PROPÓSITO:Saca una bolita de color **color** en dirección **dirección**
        PRECONDICIONES:
        *Debe haber al menos una celda hacia **direccion**
        *Debe haber al menos una bolita de color **color** en dirección **direccion**
        de las direcciones.
        PARAMETROS:
            *color - Color - El color a sacar.
            *dirección - Direccion - La direccion hacia la cual se mueve el cabezal.
    */
    Mover(direccion)
    Sacar(color)
    Mover(opuesto(direccion))
}

//29
function direcciónHaciaLaCualHayBolitasDe_(color){
    /*
        PROPÓSITO:Describe la dirección hacia la cual hay bolitas de color **color**
        PRECONDICIONES: Debe haber solo una celda con bolitas de color **color**
        en una de las direcciones a mirar. 
        PARAMETROS:
            *color - Color - El color de las bolitas a buscar.
        TIPO:Direccion
    */
    direcciónAMover := minDir()
    while(hayBolitas_Al_(color,direcciónAMover)){ //biblioteca
        direcciónAMover := siguiente(direcciónAMover)
    }
    return(direcciónAMover)
}
//30
function cantidadDeVecinasConBolitas(){
    /*
        PROPÓSITO:Describe la cantidad de celdas vecinas que contienen bolitas 
        PRECONDICIONES:  Ninguna 
        TIPO:Numero
        OBSERVACIONES: Recorrido sobre enumerativos, contando las celdas que no estan vacias
    */
    cantidadConBolitas := 0
    direcciónAMover := minDir()
    while(direcciónAMover/= maxDir()){
        cantidadConBolitas:= cantidadConBolitas + unoSi_CeroSino(hayBolitasAl_(direcciónAMover)) +
                                                  unoSi_CeroSino(hayBolitasAl_YAl_(direcciónAMover, siguiente(direcciónAMover)))
        direcciónAMover := siguiente(direcciónAMover)
    }
    return(cantidadConBolitas + unoSi_CeroSino(hayBolitasAl_(direcciónAMover)) +
                                                  unoSi_CeroSino(hayBolitasAl_YAl_(direcciónAMover, siguiente(direcciónAMover))))
}

function hayBolitasAl_YAl_(direccionPrincipal,direccionSecundaria){
    /*
        PROPÓSITO: Indica si hay bolitas en la celda en dirección al **direccionPrincipal** y ** direccionSecundaria**
        PRECONDICIONES: Ninguna
        PARAMETROS:
            * direccionPrincipal - Dirreción - La dirección principal hacia la cual se mueve el cabezal
            * direccionSecundaria - Dirección -  La dirección secundaria hacia la cual se mueve el cabezal
        TIPO:Booleano
    */
   return(puedeMover(direccionPrincipal)&&puedeMover(direccionSecundaria)&&tieneBolitas_Al_)
}

function tieneBolitasAl_YAl_(direccionPrincipal,direccionSecundaria){
    /*
        PROPÓSITO: Indica si hay bolitas en la celda en dirección al **direccionPrincipal** y ** direccionSecundaria**
        PRECONDICIONES: Ninguna
        PARAMETROS:
            * direccionPrincipal - Dirreción - La dirección principal hacia la cual se mueve el cabezal
            * direccionSecundaria - Dirección -  La dirección secundaria hacia la cual se mueve el cabezal
        TIPO:Booleano
    */
   Mover(direccionPrincipal)
   Mover(direccionSecundaria)
   return(not esCeldaVacía())
}

function hayBolitasAl_(direccion){
    /*
        PROPÓSITO: Indica si hay bolitas en la celda en dirección al **direccion**
        PRECONDICIONES: Ninguna
        PARAMETROS:
            * direccion - Dirreción - La dirección principal hacia la cual se mueve el cabezal
        TIPO:Booleano
    */
   return(puedeMover(direccion)&&tieneBolitasAl_(direccion))
}

function tieneBolitasAl_(direccion){
    /*
        PROPÓSITO: Indica si hay bolitas en la celda en dirección al **direccion**
        PRECONDICIONES: Ninguna
        PARAMETROS:
            * direccion - Dirreción - La dirección principal hacia la cual se mueve el cabezal
        TIPO:Booleano
    */
   Mover(direccion)
   return(not esCeldaVacía())
}

//31
procedure Poner_EnLineaHacia_De_IncrementandoDeA_ComenzandoEn_(largoDeLinea, direcciónAMover,colorAPoner,incremento,numeroInicial){
    /*
    PROPÓSITO: Pone una linea de **largoDeLinea** celdas en direccion hacia **direccionAMover** con bolitas de color **colorAPoner**,
    colocando en la celda inicial **numeroInicial** bolitas e incrementando **incremento** veces en cada celda que avanza.
    PRECONDICIONES:  Debe haber al menos  **largoDeLinea** celdas en direccion hacia **direccionAMover** desde la celda actual.
    PARAMETROS:
        * largoDeLinea - Numero - El largo de la linea a poner.
        * direcciónAMover - Dirección - La dirección hacia la cual se mueve el cabezal.
        * colorAPoner - Color - El color de la linea a poner.
        * incremento - Numero - El incremento de bolitas a poner.
        * numeroInicial - Numero - La cantidad de bolitas a poner en la celda inicial.
    */
    cantidadAPoner:= numeroInicial
    repeat(largoDeLinea-1){
        Poner_DeColor_(cantidadAPoner,colorAPoner)
        Mover(direcciónAMover)
        cantidadAPoner:= cantidadAPoner + incremento
    }
    Poner_DeColor_(cantidadAPoner,colorAPoner)
}