//1

procedure ComerTodosLosCocosDelNivel(){
    /*
    PROPÓSITO: Come todos los cocos del nivel , dejando el cabezal sobre gobsman en el final 
    del recorrido.
    PRECONDICIONES:
        * Hay un coco en cada celda del nivel.
        * Gobs-Man está en la celda actual.
    OBSERVACIONES: Recorrido de procesamiento, comiendo todos los cocos del nivel.
    */
    LlevarAGobsManAlInicioDelRecorridoAl_Y_(Este,Norte)
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)){
        ComerCoco()
        LlevarAGobsManASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }
    ComerCoco()
}

procedure LlevarAGobsManAlInicioDelRecorridoAl_Y_(dirPrincipal,dirSecundaria){
    /*
    PROPÓSITO: Mueve a GobsMan hacia la esquina **dirPrincipal** y **dirSecundaria**.
    PRECONDICIONES: Los paràmetros **dirPrincipal** y **dirSecundaria** no pueden ser opuestos
    ni iguales. 
    PARÀMETROS: 
        * dirPrincipal - Direcciòn - Direcciòn principal del recorrido.
        * dirSecundaria - Direcciòn - Direcciòn secundaria del recorrido. 
    */
    LlevarGobsManAlBorde_(opuesto(dirPrincipal))
    LlevarGobsManAlBorde_(opuesto(dirSecundaria))
}

procedure LlevarAGobsManASiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
    /*
        PROPÓSITO: Mueve a GobsMan a la siguiente celda en un recorrido hacia **dirPrincipal**
        y **dirSecundaria**
        PRECONDICIONES: 
            *Los paràmetros **dirPrincipal** y **dirSecundaria** no pueden ser opuestos
        ni iguales.
            *Debe haber al menos una siguiente celda en el recorrido.
        PARÀMETROS: 
            * dirPrincipal - Direcciòn - Direcciòn principal hacia la cual se mueve el cabezal.
            * dirSecundaria - Direcciòn - Direcciòn secundaria hacia la cual se mueve el cabezal. 
    */
    if(puedeMover(dirPrincipal)){
        MoverGobsManAl_(dirPrincipal)
    }else{
        LlevarGobsManAlBorde_(opuesto(dirPrincipal))
        MoverGobsManAl_(dirSecundaria)
    }
}

//2
procedure ComerTodasLasCerezasDelNivel(){
    /*
    PROPÓSITO: Come todas las cerezas del nivel , dejando el cabezal sobre gobsman en el final 
    del recorrido.
    PRECONDICIONES: Gobs-Man está en la celda actual.
    OBSERVACIONES: Recorrido de procesamiento, comiendo las cerezas que haya en el nivel.
    */
    LlevarAGobsManAlInicioDelRecorridoAl_Y_(Este,Norte)
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)){
        ComerCerezaSiHay()
        LlevarAGobsManASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }
    ComerCerezaSiHay()
}

procedure ComerCerezaSiHay(){
    /*
        PROPÓSITO: GobsMan Come Cereza de la celda actual si hay, caso contrario no hace nada.
        PRECONDICIONES: Gobs-Man está en la celda actual.
    */
    if(hayCereza()){
        ComerCereza()
    }
}

//3
procedure ComerTodoLoQueSeEncuentreEnElNivel(){
    /*
    PROPÓSITO: Come todo lo que se encuentre en el nivel , dejando el cabezal sobre gobsman en el final 
    del recorrido.
    PRECONDICIONES:
        * Hay un coco en cada celda del nivel.
        * Gobs-Man está en la celda actual.
    OBSERVACIONES: Recorrido de procesamiento, comiendo todo lo que haya en el nivel.
    */
    ComerTodasLasCerezasDelNivel()
    ComerTodosLosCocosDelNivel()
}

//4
procedure ComerTodoLoQueSeEncuentreEnElNivel2(){
    /*
    PROPÓSITO: Come todo lo que se encuentre en el nivel , dejando el cabezal sobre gobsman en el final 
    del recorrido.
    PRECONDICIONES:
        *Gobs-Man está en la celda actual.
        *En todas las celdas debe haber Cerezas o Cocos.
    OBSERVACIONES: Recorrido de procesamiento, comiendo todo lo que haya en el nivel.
    */
    LlevarAGobsManAlInicioDelRecorridoAl_Y_(Este,Norte)
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)){
        ComerCerezaSinoCoco()
        LlevarAGobsManASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }
    ComerCerezaSinoCoco()
}

procedure ComerCerezaSinoCoco(){
    /*
        PROPÓSITO: GobsMan Come Cereza de la celda actual si hay, caso contrario come Coco.
        PRECONDICIONES: Gobs-Man está en la celda actual.
    */
    if(hayCereza()){
        ComerCereza()
    } else {
        ComerCoco()
    }
}

//5
procedure RecorrerNivelMuriendoEnElFantasma(){
    /*
    PROPÓSITO: Gobsman recorre el nivel hasta encontrar un fantasta y muere, dejando el cabezal sobre Gobsman.
    PRECONDICIONES:
        *Gobs-Man está en la celda actual.
        *Debe haber al menos un fantasma en el nivel.
    OBSERVACIONES: Recorrido de busqueda hasta encontrar un fantasma en el nivel.
    */
    LlevarAGobsManAlInicioDelRecorridoAl_Y_(Este,Norte)
    while(not hayFantasma()){
        LlevarAGobsManASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }
    MorirGobsMan()
}

//6
procedure RecorrerNivelMuriendoSiHayFantasma(){
    /*
    PROPÓSITO:  Gobsman recorre el nivel y muere si hay fantasma.
    PRECONDICIONES:Gobs-Man está en la celda actual.
    OBSERVACIONES: Recorrido de busqueda hasta encontrar un fantasma en el nivel.
    */
    LlevarAGobsManAlInicioDelRecorridoAl_Y_(Este,Norte)
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)&& not hayFantasma()){
        LlevarAGobsManASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }
    MorirSiHayFantasma()
}

procedure MorirSiHayFantasma(){
    /*
        PROPÓSITO:Gobsman muere si hay fantasma, caso contrario, no hace nada.
        PRECONDICIONES: Gobs-Man está en la celda actual.
    */
    if(hayFantasma()){
        MorirGobsMan()
    } 
}

//7
procedure JugarNivel(){
    /*
    PROPÓSITO: GobsMan Come todo lo que se encuentre en el nivel , dejando el cabezal sobre gobsman en el final 
    del recorrido o en donde muera.
    PRECONDICIONES:Gobs-Man está en la celda actual.
    OBSERVACIONES: Recorrido de procesamiento, comiendo todo lo que haya en el nivel mientras pueda.
    */
    LlevarAGobsManAlInicioDelRecorridoAl_Y_(Este,Sur)
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Sur)&& not hayFantasma()){
        ComerCerezaSinoCoco()
        LlevarAGobsManASiguienteCeldaEnUnRecorridoAl_Y_(Este,Sur)
    }
    MorirGobsManSiHayFantasmaSinoComer()
}

procedure MorirGobsManSiHayFantasmaSinoComer(){
    /*
        PROPÓSITO:Gobsman muere si hay fantasma, caso contrario come.
        PRECONDICIONES: Sin precondiciones
    */
    if(hayFantasma()){
        MorirGobsMan()
    } else {
        ComerCerezaSinoCoco()
    }
}

//8
procedure JugarNivelRecorriendoHaciaEl_Y_(dirPrincipal, dirSecundaria){
    /*
    PROPÓSITO: GobsMan Come todo lo que se encuentre en el nivel , dejando el cabezal sobre gobsman en el final 
    del recorrido o en donde muera.
    PRECONDICIONES:
        *Gobs-Man está en la celda actual.
        *Los paràmetros **dirPrincipal** y **dirSecundaria** no pueden ser opuestos ni iguales. 
        *En todas las celdas debe haber Cerezas o Cocos.
    PARÀMETROS: 
        * dirPrincipal - Direcciòn - Direcciòn principal del recorrido.
        * dirSecundaria - Direcciòn - Direcciòn secundaria del recorrido. 
    OBSERVACIONES: Recorrido de procesamiento, comiendo todo lo que haya en el nivel mientras pueda.
    */
    LlevarAGobsManAlInicioDelRecorridoAl_Y_(dirPrincipal,dirSecundaria)
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal,dirSecundaria)&& not hayFantasma()){
        ComerCerezaSinoCoco()
        LlevarAGobsManASiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal,dirSecundaria)
    }
    MorirGobsManSiHayFantasmaSinoComer()
}

//9
function gobsMan(){
    /*
        PROPÓSITO: Describe el color con el que se representa a GobsMan.
        PRECONDICIONES: Sin precondiciones.
        TIPO: Color
    */
    return(Azul)
}

function coco(){
    /*
        PROPÓSITO: Describe el color con el que se representan los cocos.
        PRECONDICIONES: Sin precondiciones.
        TIPO: Color
    */
    return(Negro)
}

function cereza(){
    /*
        PROPÓSITO: Describe el color con el que se representan las cerezas.
        PRECONDICIONES: Sin precondiciones.
        TIPO: Color
    */
    return(Rojo)
}

function fantasma(){
    /*
        PROPÓSITO: Describe el color con el que se representan los fantasmas.
        PRECONDICIONES: Sin precondiciones.
        TIPO: Color
    */
    return(Verde)
}

procedure MoverGobsManAl_(dirección){
    /*
    PROPÓSITO: Mueve a Gobs-Man a la celda vecina en la dirección “dirección”.
    El cabezal queda sobre Gobs-Man.
    PRECONDICIÓNES:
    * Existe una celda vecina en dirección “dirección”.
    * El cabezal se encuentra sobre Gobs-Man.
    * Gobs-Man está vivo.
    PARÁMETROS:
    * dirección: Dirección - Indica hacia dónde se moverá Gobs-Man.
    */
    Sacar(gobsMan())
    Mover(dirección)
    Poner(gobsMan())
}

procedure LlevarGobsManAlBorde_(dirección){
    /*
    PROPÓSITO: Mueve a Gobs-Man a la celda en el borde hacia la dirección 
    “dirección”. El cabezal queda sobre Gobs-Man.
    PRECONDICIÓNES:
    * El cabezal se encuentra sobre Gobs-Man.
    * Gobs-Man está vivo.
    PARÁMETROS:
    * dirección: Dirección - Indica hacia dónde se moverá Gobs-Man.
    */
    Sacar(gobsMan())
    IrAlBorde(dirección)
    Poner(gobsMan())
}

procedure ComerCoco(){
    /*
    PROPÓSITO: Come el coco que hay en la celda actual.
    PRECONDICIONES:
    * Hay un coco en la celda actual.
    * Gobs-Man está en la celda actual.
    */
    Sacar(coco())
}

procedure ComerCereza(){
    /*
    PROPÓSITO: Come la cereza haya en la celda actual.
    PRECONDICIONES:
    * Hay una cereza en la celda actual.
    * Gobs-Man está en la celda actual.
    */
    Sacar_DeColor_(2,cereza())
}

function hayCereza(){
    /*
    PROPÓSITO: Indica cuando hay una cereza en la celda actual.
    PRECONDICIÓN: Ninguna.
    TIPO: Booleano.
    */
    return(nroBolitas(cereza())==2)
}

procedure MorirGobsMan(){
    /*
    PROPÓSITO: Hace que Gobs-Man muera, dejando su cuerpo en la celda actual.
    PRECONDICIONES:
    * El cabezal se encuentra sobre Gobs-Man
    */
    Poner(Azul)
}

function hayFantasma(){
    /*
    PROPÓSITO: Indica cuando hay un fantasma en la celda actual.
    PRECONDICIÓN: Ninguna.
    TIPO: Booleano.
    */
    return(nroBolitas(fantasma())==5)
}
