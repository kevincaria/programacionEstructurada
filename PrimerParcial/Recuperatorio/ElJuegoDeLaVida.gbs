procedure MorirCélula() {
    /*
        PROPÓSITO:  Deja la celula viva actual muerta.
        PRECONDICIONES:
            * Debe haber una celula viva en la celda actual
        OBSERVACIONES: Las celulas vivas se representan con una bolita verde
    */
    Sacar(colorDeCelulaViva())
}

function colorDeCelulaViva() {
    /*
        PROPÓSITO:  Describe el color de una celula viva
        TIPO: Color
        PRECONDICIONES:Ninguna
    */
    
    return (Verde)
}
procedure PonerMarcaParaReanimación() {
    /*
        PROPÓSITO:  Pone una marca para reanimar una celula muerta en la celda actual
        PRECONDICIONES:
            * Debe haber una celula muerta en la celda actual
    */
    Poner(colorMarcaDeReanimación())
}

procedure PonerMarcaParaEliminar() {
    /*
        PROPÓSITO:  Pone una marca para eliminar una celula muerta en la celda actual
        PRECONDICIONES:
            * Debe haber una celula muerta en la celda actual
    */
    Poner(colorMarcaDeEliminación())
}

procedure ProcesarMarcaDeEliminación() {
    /*
        PROPÓSITO: Marca la celula de la celda actual para ser eliminada, dejandola muerta
        PRECONDICIONES:
            * Debe haber una celula viva en la celda actual
    */
    Sacar(colorMarcaDeEliminación())
    MorirCélula()
}

procedure ProcesarMarcaDeReanimacion() {
    /*
        PROPÓSITO: Marca la celula de la celda actual para ser eliminada, dejandola muerta
        PRECONDICIONES:
            * Debe haber una celula viva en la celda actual
    */
    Sacar(colorMarcaDeReanimación)
    Poner(colorDeCelulaViva)
}

procedure Simular_Ticks(cantidad) {
    /*
        PROPÓSITO: Simula **cantidad** de ticks en el universo
        PARÁMETROS:
            * cantidad - Numero - La cantidad de veces que se simula
        PRECONDICIONES: Ninguna
    */
    repeat (cantidad) {
        SimularUnTick()
    }
}

procedure QuitarMarca_(color) {
    /*
        PROPÓSITO:  Quita la marca del color **color** en la celula actual
        PARÁMETROS:
            * color - Color - El color de la marca a evaluar en la celula actual
        PRECONDICIONES: 
            * Debe haber marca de color **color** en la celda actual
    */
    Sacar(color)
}

procedure QuitarMarcas() {
    /*
        PROPÓSITO:  Quita la marca del color **color** en la celula actual
        PRECONDICIONES: Ninguna
    */
    if(estáMarcadaParaSerReanimada){
        QuitarMarca_(colorMarcaDeReanimación)
    }elseif (estáMarcadaParaSerEliminada) {
        QuitarMarca_(colorMarcaDeEliminación)
    }
}

function esCélulaViva() {
    /*
        PROPÓSITO:  Indica si la celula de la celda actual esta viva
        TIPO: Booleano
        PRECONDICIONES: Ninguna
    */
    return (hayBolitas(colorDeCelulaViva))
}

function estáMarcadaParaSerEliminada() {
    /*
        PROPÓSITO:  Indica si la celula actual esta marcada para ser eliminada
        TIPO: Booleano
        PRECONDICIONES: Ninguna
    */
    
    return (hayBolitas(colorMarcaDeEliminación))
}

function estáMarcadaParaSerReanimada() {
    /*
        PROPÓSITO:  Indica si la celula actual esta marcada para ser eliminada
        TIPO: Booleano
        PRECONDICIONES: Ninguna
    */
    
    return (hayBolitas(colorMarcaDeReanimación))
}


procedure ProcesarMarcasDeCélula() {
    /*
        PROPÓSITO:  Procesa las marcas que tenga la celula actual si las tuviera
        PRECONDICIONES: Ninguna
    */
    if (estáMarcadaParaSerEliminada) {
        ProcesarMarcaDeEliminación
    elseif (estáMarcadaParaSerReanimada) {
        ProcesarMarcaDeReanimacion
    } 
}

procedure AplicarPautasDeMarcadoACélula() {
    /*
        PROPÓSITO: Aplica las pautas del juego a la celula actual, marcandola para ser reanimada,
        eliminada o no marcandola segun corresponda
        PRECONDICIONES:
            * ....
    */
    if (esCélulaViva() && (cantidadDeVecinasVivas() < 2 || cantidadDeVecinasVivas() >3 )){
        PonerMarcaParaEliminar() //Poner(Rojo)
    } elseif(not esCélulaViva() && cantidadDeVecinasVivas() ==3){
        PonerMarcaParaReanimación() //Poner(Azul)
    }
}

function hayVecinaVivaAl_(direccion) {
    /*
        PROPÓSITO:  Indica si existe una celula viva en la direccion **direccion** y puede mover en 
        dicha direccion
        PARÁMETROS:
            * direccion - Direccion - La direccion hacia la cual se evalua
        TIPO: Booleano
        PRECONDICIONES: Sin precondiciones
    */
    
    return(puedeMover(direccion) && tieneVecinaVivaAl_(direccion))
}


function tieneVecinaVivaAl_(direccion){
    /*
        PROPÓSITO:  Indica si existe una celula viva en la direccion **direccion**
        PARÁMETROS:
            * direccion - Direccion - La direccion hacia la cual se evalua
        TIPO: Booleano
        PRECONDICIONES: 
            *Debe haber al menos una celda hacia **direccion**
    */
    Mover(direccion)
    return(esCelulaViva())
}

function cantidadDeVecinasVivas() {
    /*
        PROPÓSITO:  Describe la cantidad de vecinas vivas que tiene la celula actual alrededor
        TIPO: Numero
        PRECONDICIONES:Ninguna
    */
        direccion := minDir()
       cantidadVecinasVivas := 0
       while(direccion /= maxDir()){
       cantidadVecinasVivas := cantidadVecinasVivas + unoSi_CeroSino (hayVecinaVivaAl_SiPuedeMover(direccion)) + unoSi_CeroSino (hayVecinaVivaEnDiagonalAl_YAl_SiPuedeMover(direccion,siguiente(direccion)
        direccion := siguiente(direccion)        
       }
    return (cantidadVecinasVivas + unoSi_CeroSino (hayVecinaVivaAl_SiPuedeMover(direccion)) + unoSi_CeroSino (hayVecinaVivaEnDiagonalAl_YAl_SiPuedeMover(direccion,siguiente(direccion))  
}
function hayVecinaVivaAl_SiPuedeMover(direccion){

    /*
    PROPOSITO: indica si existe una célula viva hacia la direccion **direccion** y si puede mover en dicha 
    direccion
    PARAMETROS: 
        *direccion - Direccion - La direccion a evaluar
    PRECONDICIONES: Ninguna
    TIPO: booleano
    */
    
    return(puedeMover(direccion) && hayVecinaVivaAl_(direccion))
}


function hayVecinaVivaAl_(direccion){
    /*
    PROPOSITO: indica si existe una célula viva en la dirección dada.
    PARAMETROS: 
        *direccion - Direccion - La direccion a evaluar
    PRECONDICIONES: hay una ubicacion libre al *direccion*
    TIPO: booleano
    */
    Mover(direccion)
    return(esCelulaViva())
}

procedure ProcesarUnTick() {
    /*
        PROPÓSITO:  Procesa la totalidad de las celulas del universo, aplicando las pautas del juego 
        a cada una de ellas y procesando luego las marcas de reanimacion o eliminacion que hayan generado
        PRECONDICIONES: Ninguna
    */
    
}

function cantidadDeCélulasVivasEnGeneración_(cantidadDeTicks) {
    /*
        PROPÓSITO:  Describe la cantidad de celulas vivas que quedan en el universo tras simular
        **cantidadDeTicks** ticks
        PARÁMETROS:
            * cantidadDeTicks - Numero - La cantidad de ticks a procesar
        TIPO: Numero
        PRECONDICIONES: Ninguna
    */
    
    return ()
}